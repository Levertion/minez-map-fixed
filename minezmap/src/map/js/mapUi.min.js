var mapUi = {
	/*
		Hide UI elements on click event
	*/
	hideUIElements: function() {
		mapUi.minimizeSidebar();
		core.util.getElementCached("#viewportLink").popover("hide");
	},

	/*
		Expands the sidebar and accepts HTML content to display
	*/
	expandSidebar: function(content) {
		core.util.getElementCached("#sidebarContainer").addClass("expanded");
		core.util.getElementCached("#sidebar-alt").html(content);
		mapUi.util.fadeElement(core.util.getElementCached("#sidebar"), false, 0, 300);
		mapUi.util.fadeElement(core.util.getElementCached("#sidebar-alt"), true, 1, 300);

		if ($.browser.mobile) {
			$(".leaflet-control-zoomslider").addClass("hidden");
		}
	},

	minimizeSidebar: function() {
		core.util.getElementCached("#sidebarContainer").removeClass("expanded");
		core.util.getElementCached("#sidebar-alt").html("");
		mapUi.util.fadeElement(core.util.getElementCached("#sidebar"), true, 1, 300);
		mapUi.util.fadeElement(core.util.getElementCached("#sidebar-alt"), false, 0, 300);

		if ($.browser.mobile) {
			$(".leaflet-control-zoomslider").removeClass("hidden");
		}
	},

	/*
		Wrapper for expanding the sidebar
		Used when clicking map markers and opening wiki page content
	*/
	openWiki: function(p, d) {
		mapUi.expandSidebar(L.Util.template(mapUi.sidebarTemplates.iframe, {
			src: L.Util.template(overviewerConfig.settings.wikiUrl, {
				page: escape(p),
				div: d
			})
		}));
		$("#sidebarContainer .vertClose").click(function() {
			mapUi.minimizeSidebar();
		});
	},

	/*
		Wrapper for expanding the sidebar
		Used when opening an arbitrary url
	*/
	openUrl: function(u) {
		mapUi.expandSidebar(L.Util.template(mapUi.sidebarTemplates.iframe, {
			src: u
		}));
		$("#sidebarContainer .vertClose").click(function() {
			mapUi.minimizeSidebar();
		});
	},

	/*
		Search for a location or point
		We assume they either enter:
			A location
				- Look for coordinate of location in marker list
			A point
				- Go directly to point (assume y=64 if no y provided)
	*/
	searchManager: function(searchStr) {
		var coords = mapUi.util.extractCoords(searchStr);

		// Search for the string they entered
		var searchItem = {
			index: -1,
			location: [0, 0, 0]
		};
		for (markerType in core.markerset) {
			for (markerLabel in core.markerset[markerType]) {
				var marker = core.markerset[markerType][markerLabel];
				var index = markerLabel.indexOf(searchStr);
				if ((index < searchItem.index && index > -1) || (index > -1 && searchItem.index == -1) || searchStr == markerLabel.split(overviewerConfig.settings.labelDelimiter)[0]) {
					searchItem.index = index;
					searchItem.location = marker.location;
				}
			}
		}
		if (searchItem.index != -1) {
			coords = searchItem.location;
		}

		// Try to go the coords (either found from the location name, or what they entered)
		if (coords) {
			overviewer.map.setView(overviewer.util.fromWorldToLatLng(coords[0], coords[1], coords[2]), Math.ceil(core.util.getConfigValue("zoomLevels") * 0.75));
		}
	},

	/*
		Saves the current viewport into local storage/cookies to be read on refresh
	*/
	saveViewport: function() {
		var pref = {
			value: core.util.viewportToString(true),
			timestamp: new Date().getTime()
		};
		core.util.storeData("viewport", pref);

		// If we are on a mobile device, update the coordbox with the center of the screen
		if ($.browser.mobile) {
			var center = overviewer.map.getCenter();
			var worldPoint = overviewer.util.fromLatLngToWorld(center.lat, center.lng);
			core.util.getElementCached("#coords").html("x" + worldPoint.x + " z" + worldPoint.z);
		}
	},

	/*
		Loads a viewport from a strong (short or long) and sets the map view
		to the default or loaded zoom
	*/
	loadViewport: function(overrideSavedViewport) {
		var view;

		// First check to see if the url is a location
		if (location.hash != "" && !mapUi.loadedLocationHash) {
			mapUi.loadedLocationHash = true;
			view = core.util.stringToViewport(location.hash.split("#")[1]);
			overviewer.map.setView(view.latlng, view.zoom);
			if (overviewer.currentWorld != view.world || overviewer.currentTileset != view.tileset) {
				overviewer.currentWorld = view.world;
				overviewer.currentTileset = view.tileset;
				core.util.globalRefresh();
			}
			return;
		}

		// Now check to see if there is a fresh location pref available
		var pref = core.util.getData("viewport");
		if (!pref || new Date().getTime()-pref.timestamp > 1000*60*3 || overrideSavedViewport) {
			var centerLatLng = overviewer.util.fromWorldToLatLng(core.util.getConfigValue("center")[0], core.util.getConfigValue("center")[1], core.util.getConfigValue("center")[2]);
			overviewer.map.setView([centerLatLng.lat, centerLatLng.lng], core.util.getConfigValue("defaultZoom"));
			return;
		}
		
		view = core.util.stringToViewport(pref.value);
		overviewer.map.setView(view.latlng, view.zoom);
		if (overviewer.currentWorld != view.world || overviewer.currentTileset != view.tileset) {
			overviewer.currentWorld = view.world;
			overviewer.currentTileset = view.tileset;
			core.util.globalRefresh();
		}
	},

	/*
		For the link UI
	*/
	getLink: function(short) {
		return "<div class='input-prepend'>" +
			"<span class='add-on'>" + (short ? "Short" : "Long") + "link</span>" +
			"<input type='text' onclick='(function(e, o){o.focus();o.select();})(event, this)'" +
			"id='" + (short ? "short" : "long") + "link' autocomplete='off' spellcheck='false' value='" +
			(location.protocol+"//"+location.host+location.pathname+"#") + core.util.viewportToString(short) +
			"'></div>";
	},

	/*
		Validates and submits the contact form
	*/
	validateForm: function() {
		var username = core.util.getElementCached("#contactForm-username").val();
		var message = core.util.getElementCached("#contactForm-message").val();
		var email = core.util.getElementCached("#contactForm-email").val();
		var mapName = typeof overviewerConfig.settings.mapName === "undefined" ? $("head title").text() : overviewerConfig.settings.mapName;
		
		var invalid = false;

		// Show the user the error and early out
		if (username == "") {
			core.util.getElementCached("#contactForm-username").parent().addClass("error");
			invalid = true;
		}
		if (message == "") {
			core.util.getElementCached("#contactForm-message").parent().addClass("error");
			invalid = true;
		}
		if (email != "" && email.indexOf("@") == -1) {
			core.util.getElementCached("#contactForm-email").parent().addClass("error");
			invalid = true;
		}

		if (!invalid && !$("#contactForm button[type='submit']").hasClass("disabled")) { // Client-side validation complete, send the message
			core.util.getElementCached("#contactForm button[type='submit']").html("Sending...").addClass("disabled");
			$.ajax({
				type: "POST",
				url: overviewerConfig.settings.mapRootDirectory + "server/contactForm.php",
				data: {
					username: username,
					message: message,
					email: email,
					map: mapName
				},
				success : function(r) {
					console.log(r);
					if (r == "1") {
						mapUi.formSuccess();
					} else {
						mapUi.formError();
					}
				},
				error: function() {
					mapUi.formError();
				},
				always: function() {
					core.util.getElementCached("#contactForm button[type='submit']").removeClass("disabled");
				}
			});
		}
	},

	formError: function() {
		core.util.getElementCached("#contactForm button[type='submit']").html("Error!");
		setTimeout(function() {core.util.getElementCached("#contactForm button[type='submit']").html("Send").removeClass("disabled");}, 1000);
	},

	formSuccess: function() {
		core.util.getElementCached("#contactForm button[type='submit']").html("Message Sent!");
		setTimeout(function() {
			$("#contactForm").modal("hide");
			mapUi.clearForm();
			core.util.getElementCached("#contactForm button[type='submit']").html("Send").removeClass("disabled");
		}, 2500);
	},

	/*
		Clear the contact form fields
	*/
	clearForm: function() {
		core.util.getElementCached("#contactForm-username").val("");
		core.util.getElementCached("#contactForm-message").val("");
		core.util.getElementCached("#contactForm-email").val("");

		core.util.getElementCached("#contactForm-username").parent().removeClass("error");
		core.util.getElementCached("#contactForm-message").parent().removeClass("error");
		core.util.getElementCached("#contactForm-email").parent().removeClass("error");
	},

	/*
		Open the form with preset values
	*/
	openFormTemplate: function(obj) {
		core.util.getElementCached("#contactForm").modal("show");

		core.util.getElementCached("#contactForm-username").val(obj.username ? obj.username : "");
		core.util.getElementCached("#contactForm-message").val(obj.message ? obj.message : "");
		core.util.getElementCached("#contactForm-email").val(obj.email ? obj.email : "");
	},

	/*
		Set the legend to be collapsed or expanded depending on the zoom
	*/
	updateLegendVisibility: function() {
		if (!overviewerConfig.settings.showChestMarkers) return;
		if (overviewer.map.getZoom() >= core.util.getConfigValue("markerZoomThresholds")["chest"] && core.util.getData("markerToggle-chest")) {
				core.util.getElementCached("#chestLegend").css("display", "block");
				setTimeout(function() {
					core.util.getElementCached("#chestLegend").css("opacity", 1);
				}, 300);

				// Shift our tileset dropdown over
				core.util.getElementCached("#dropdownContainer").addClass("shifted");
		} else {
			core.util.getElementCached("#chestLegend").css("opacity", 0);
			setTimeout(function() {
				core.util.getElementCached("#chestLegend").css("display", "none");
			}, 300);

			// Shift our tileset dropdown back
			core.util.getElementCached("#dropdownContainer").removeClass("shifted");
		}
	},

	/*
		Handler for when the window resizes
	*/
	windowResize: function() {
		if ($.browser.mobile) {
			window.scrollTo(0, 0);
		}
		setTimeout(function() {
			overviewer.map.invalidateSize(false);
		}, 400);

		if ($(window).width() < 1200) {
			mapUi.util.fadeElement(core.util.getElementCached("#toggleSidebarContainer"), true, 1, .3);
		} else {
			if (!core.util.getElementCached("#sidebarContainer").hasClass("sidebarCollapsed")) {
				mapUi.util.fadeElement(core.util.getElementCached("#toggleSidebarContainer"), false, 0, .3);
			}
		}
	},

	/*
		Cycle through ads so users don't get bored
		Assuming adsense, max 3 ads
	*/
	adCycle: function(cycleState) {
		$("#sidebar > div:first-child div").each(function(i) {
			$(this).css("display", i==cycleState ? "block" : "none");
		});

		cycleState = cycleState<2 ? cycleState+1 : 0;
		setTimeout(function() {
			mapUi.adCycle(cycleState);
		}, 2 * 1000 * 60);
	}
};

/*
	HTML templates for the sidebar to use (i.e. open wiki)
*/
mapUi.sidebarTemplates = {
	iframe: "<div class='closeContainer'>" +
	"<div class='vertClose'>" +
	"<i class='icon-chevron-right'></i>" +
	"</div></div>" +
	"<iframe src='{src}' style='width: 100%; height: 100%;' seamless='true' frameborder='0'></iframe>"
};

/*
	Method for executing code after a JS link is clicked
	Note: Object reference names should = the id of the JS link
*/
mapUi.linkMethods = {
	"send-message": function() {
		core.util.getElementCached("#contactForm").modal("show");
	}
};

mapUi.fadeCache = {};

mapUi.util = {
	initialize: function() {
	    mapUi.util.checkJavascriptLinks();
	    mapUi.util.attachAccordionExpand();

	    /* Initialize UI elements */
	    // Add marker options
	    mapUi.util.initializeMarkerOptions();

	    // Add typeahead to the server ip input
	    mapUi.util.initializeExportWaypoints();

	    // Add a random tip
		mapUi.util.initializeRandomTip();

		// Add a typeahead to the search
		mapUi.util.initializeSearch();

		// Add the coords box to the bottom of the map
		mapUi.util.initializeCoordBox();

		// Initialize submit buttons
		mapUi.util.initializeSubmitButtons();

		// Check for blockers
		mapUi.util.initializeAd();

		// Add a handler to close the chest legend
		mapUi.util.initializeLegend();

		// Add elements to the world dropdown
		mapUi.util.initializeWorldDropdown();

		// Add elements to the tileset dropdown
		mapUi.util.initializeTilesetDropdown();

		// Add click event to the logo
		mapUi.util.initializeLogo();

		// Add custom placeholders to input fields for bad browsers
		mapUi.util.initializePlaceholders();

		// Add a click handler to the toggle sidebar button
		mapUi.util.initializeToggleSidebar();

		// Show the map notice if needed
		mapUi.util.initializeNotice();

		/* Set up listeners for the map */
		mapUi.util.attachMapListeners();

		/* Window event listeners */
		if (window.addEventListener) {
			window.addEventListener("resize", mapUi.windowResize, false);
		} else if (window.attachEvent) {
			window.attachEvent("resize", mapUi.windowResize);
		}
	},

	/*
		Called when the tileset is refreshed
	*/
	refresh: function() {
		/* Initialize UI elements */
	    // Add marker options
	    mapUi.util.initializeMarkerOptions();

	    // Add the coords box to the bottom of the map
		mapUi.util.initializeCoordBox();

	    // Refresh tileset dropdown
	    mapUi.util.initializeTilesetDropdown();

		/* Set up listeners for the map */
		mapUi.util.attachMapListeners();

		/* Check to make sure the chest legend should still be visible */
		mapUi.updateLegendVisibility();
	},

	/* 
		Attach listeners to the map
	*/
	attachMapListeners: function() {
		overviewer.map.on("mousedown", mapUi.hideUIElements);
		overviewer.map.on("movestart", mapUi.hideUIElements);
		overviewer.map.on("moveend", mapUi.saveViewport);
		// Add event listener for zoom change
		overviewer.map.on("zoomend", mapUi.updateLegendVisibility);
	},

	/*
		Make sure all javascript linked links don't modify the href
		This should be called after any javascript links are added to the DOM
	*/
	checkJavascriptLinks: function() {
		$(".javascriptLink").click(function(event) {
    		event.preventDefault();
    		(mapUi.linkMethods[$(this).attr("id")])();
	    });
	},

	/*
		Called in initialize to add enable/disable states to the accordion
	*/
	attachAccordionExpand: function() {
		core.util.getElementCached(".accordion-toggle").click(function(event) {
	    	$(this).parent().parent().toggleClass("expanded");
	    	var e = $(this).parent().parent();
	    	$.each(e.parent().find(".accordion-group"), function() {
	    		if (!$(this).is(e)) {
	    			$(this).removeClass("expanded");
	    		}
	    	});
	    });
	},

	/*
		Refresh or add the marker options interface
	*/
	initializeMarkerOptions: function() {
		// Attach our marker options button events
		core.util.getElementCached("#markerOptions-all").click(function() {
			$.each(core.util.getElementCached("#checkboxContainer input"), function() {
				$(this).prop("checked", true);
				$(this).change();
			});
		});
		core.util.getElementCached("#markerOptions-none").click(function() {
			$.each(core.util.getElementCached("#checkboxContainer input"), function() {
				$(this).prop("checked", false);
				$(this).change();
			});
		});

		// Purge any elements that might have been added from before
		core.util.getElementCached("#exportLayers").html("");
		core.util.getElementCached("#checkboxContainer").html("");

	    for (type in core.util.getConfigValue("markerZoomThresholds")) {
	    	var escapedType = type.replace(/ /g, "_");

	    	// Add in the marker options for exporting waypoints
			if (escapedType != "chest") {
				core.util.getElementCached("#exportLayers").append("<label class='checkbox inline'><input type='checkbox' id='inlineCheckbox-" + escapedType + "' class='exportMarkerToggle-" + escapedType + "' value='exportMarkerToggle-" + type + "' checked> " + type.capitalize() + "</label>");
				$("#inlineCheckbox-" + escapedType).click(function() {
					mapUi.util.updateWaypointCount();
				});
			}

	    	core.util.getElementCached("#checkboxContainer").append("<label class='checkbox'><input type='checkbox' class='markerToggle-" + escapedType + "' value='markerToggle-" + type + "'> " + type.capitalize() + "</input></label>");
	    	var markerToggle = $(".markerToggle-" + escapedType);
	    	markerToggle.prop("checked", typeof core.util.getData("markerToggle-" + type) !== "undefined" ? core.util.getData("markerToggle-" + type) : true);
	    	markerToggle.change(function() {
				var input = $(this);
				core.util.storeData(input.attr("value"), input.prop("checked"));
				core.util.updateMarkerGroups();
			}).change();
	    }
	    mapUi.util.updateWaypointCount();
	},

	/*
		Count the number of waypoints that will be exported with the current settings
	*/
	updateWaypointCount: function() {
		var count = 0;
		for (markerType in core.markerset) {
			var escapedType = markerType.replace(/ /g, "_");
			if ($(".exportMarkerToggle-" + escapedType).prop("checked")) {
				for (markerLabel in core.markerset[markerType]) {
					count++
				}
			}
		}
		core.util.getElementCached("#export-download").html("Download (" + count + " wypts)");
	},

	/*
		Add a typeahead to the waypoint exporting and logic for starting the download
		NOTE: All changes to the exporting logic needs to be reflected in the updateWaypointCount method!
	*/
	initializeExportWaypoints: function() {
		var typeaheadOptions = {
			source: overviewerConfig.settings.servers,
			items: 5
		};
		core.util.getElementCached("#serverIp").typeahead(typeaheadOptions);

		// Add handlers to buttons
		core.util.getElementCached("#export-help").click(function() {
			$("#waypointsHelp").modal("show");
		});
		core.util.getElementCached("#export-download").click(function() {
			var wpArr = Array();
			for (markerType in core.markerset) {
				var escapedType = markerType.replace(/ /g, "_");
				if (core.util.getElementCached(".exportMarkerToggle-" + escapedType).prop("checked")) {
					for (markerLabel in core.markerset[markerType]) {
						var marker = core.markerset[markerType][markerLabel];
						wpArr.push(markerLabel.split(overviewerConfig.settings.labelDelimiter)[0] + ":" +
						marker.location[0] + ":" + marker.location[1] + ":" + marker.location[2] + ":" +
						core.util.getElementCached("#exportVisibility").prop("checked").toString() + ":" +
						core.util.randColor());
					}
				}
			}
			wpArr.sort();
			var exportStr = "";
			for (i in wpArr) {
				exportStr += (i!=0?"\n":"") + wpArr[i];
			}

			$.download(overviewerConfig.settings.mapRootDirectory + "server/downloadManager.php", encodeURI("filename=" + (core.util.getElementCached("#serverIp").val() == "" ? overviewerConfig.settings.servers[0] : core.util.getElementCached("#serverIp").val()) + ".DIM0.points&data=" + exportStr));
		});
	},

	/*
		Refresh or add a random tip to the second tip list item
	*/
	initializeRandomTip: function() {
		var tip = mapUiConfig.tips[Math.floor(Math.random()*mapUiConfig.tips.length)];
		if (top.location != self.location && Math.floor(Math.random()*3) != 0) {
			tip = "Feeling claustrophobic? <a href='" + self.location.href + "' target='_blank'>Go to the full-sized map!</a>";
		}
		core.util.getElementCached("#randomTip").html(tip);
		mapUi.util.checkJavascriptLinks();
	},

	/*
		Initialize the search bar typeahead and key bindings
	*/
	initializeSearch: function() {
		// Initialize the typeahead
		var typeaheadOptions = {
			source: function() {
				var s = Array();
				for (markerType in core.markerset) {
					for (markerLabel in core.markerset[markerType]) {
						var marker = core.markerset[markerType][markerLabel];
						s.push(
							markerLabel.split(overviewerConfig.settings.labelDelimiter)[0] + 
							" " + overviewerConfig.settings.labelDelimiter + "<span class='typeahead-coords'>" + overviewerConfig.settings.labelDelimiter + markerType + overviewerConfig.settings.labelDelimiter + "</span> <span class='typeahead-coords'>" + overviewerConfig.settings.labelDelimiter + "(" + marker.location[0] + ", " + marker.location[1] + ", " + marker.location[2] + ")" + overviewerConfig.settings.labelDelimiter + "</span>" + overviewerConfig.settings.labelDelimiter);
					}
				}
				return s;
			},
			items: ($.browser.mobile ? 4 : 8),
			matcher: function(item) {
				item = mapUi.util.parseTypeaheadQuery(item);

				return ~item.toLowerCase().indexOf(this.query.toLowerCase());
			},
			highlighter: function(item) {
				var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
				var strArr = item.split(overviewerConfig.settings.labelDelimiter);
				var finalStr = "";
				for (i = 0; i < strArr.length; i++) {
					if (i % 2 == 0) {
						finalStr += strArr[i].replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
							return '<strong>' + match + '</strong>'
						});
					} else {
						finalStr += strArr[i];
					}
				}

				return finalStr;
		    },
		    updater: function (item) {
		    	var retStr = mapUi.util.parseTypeaheadQueryNoType(item);
		    	mapUi.searchManager(retStr);
				return retStr;
			}
		};
		core.util.getElementCached(".navSearch").typeahead(typeaheadOptions);

		// Add key bindings
		core.util.getElementCached(".navSearch").keyup(function(e) {
			var t = $(this);
			if (e.keyCode == 13) {
				mapUi.searchManager(t.val());
				t.blur();
			}
			if (e.keyCode == 27) {
				t.blur();
			}
		});
	},

	/*
		Parses out the html for the typeahead styling
	*/
	parseTypeaheadQuery: function(item) {
		var itemArr = item.split(overviewerConfig.settings.labelDelimiter);
		var parsedItem = "";
		for (i = 0; i < itemArr.length; i++) {
			if (i % 2 == 0) {
				parsedItem += itemArr[i];
			}
		}
		return parsedItem;
	},

	/*
		Parses out the html for the typeahead styling WITHOUT THE MARKER TYPE
	*/
	parseTypeaheadQueryNoType: function(item) {
		var itemArr = item.split(overviewerConfig.settings.labelDelimiter);
		var parsedItem = "";
		var j = -1;
		for (i = 0; i < itemArr.length; i++) {
			if (i % 2 == 0) {
				j++;
				if (j != 1) parsedItem += itemArr[i];
			}
		}
		return parsedItem;
	},

	/*
		Add a coord box to the bottom of the map that shows current mouseover position
	*/
	initializeCoordBox: function() {
		overviewer.map.on("mousemove", function(e) {
			var worldPoint = overviewer.util.fromLatLngToWorld(e.latlng.lat, e.latlng.lng);
			core.util.getElementCached("#coords").html("x" + worldPoint.x + " z" + worldPoint.z);
		});
		// Show the center of the map before they start mousing over
		var center = overviewer.map.getCenter();
		var worldPoint = overviewer.util.fromLatLngToWorld(center.lat, center.lng);
		core.util.getElementCached("#coords").html("x" + worldPoint.x + " z" + worldPoint.z);

		var popoverOptions = {
			html : true,
			title: function() {
				return mapUi.getLink(true);
			},
			content: function() {
				return mapUi.getLink(false);
			},
			placement: "top"
		};

		// Add popover to the link
		core.util.getElementCached("#viewportLink").popover(popoverOptions);
	},

	/*
		Add callbacks for submit buttons
	*/
	initializeSubmitButtons: function() {
		core.util.getElementCached("#contactForm button[data-dismiss='modal']").click(function() {
			mapUi.clearForm();
		});
		core.util.getElementCached("#contactForm button[type='submit']").click(function() {
			mapUi.validateForm();
		});
	},

	/*
		Checks to see if there is an adblocker present
	*/
	initializeAd: function() {
		/*setTimeout(function() {
			if ($("#sidebar ins").length > 0) {
				core.util.getElementCached("#sidebar div[type=\"blocked-header\"]").before("<div type='thanksImg'></div>");

				core.util.getElementCached("#sidebar div[type=\"blocked-header\"]").css("display", "none");
				core.util.getElementCached("#sidebar div[type=\"blocked-desc\"]").css("display", "none");

				core.util.getElementCached("#sidebar > div:first-child").css("border", "none");
			}
		}, 500);*/

		setTimeout(function() {
			if ($("#sidebar ins").length > 0) {
				core.util.getElementCached("#sidebar div[type=\"thanksImg\"]").remove();

				// Show thanks for nice people if they recently unblocked, or randomly
				if (core.util.getData("hasAdblock") || showThanks) {
					core.util.getElementCached("#sidebar ins").html("");
					core.util.getElementCached("#sidebar ins").css("background", "url(http://minezmap.com/src/map/css/images/ThanksFlat.png)");

					core.util.getElementCached("#sidebar ins").css("width", "300px");
					core.util.getElementCached("#sidebar ins").css("height", "250px");

					core.util.storeData("hasAdblock", false);
				}

				/*core.util.getElementCached("#sidebar div[type=\"blocked-background\"]").css("z-index", -2);
				setTimeout(function() {
					core.util.getElementCached("#sidebar div[type=\"blocked-header\"]").css("z-index", -1).css("opacity", 1);
					core.util.getElementCached("#sidebar div[type=\"blocked-desc\"]").css("z-index", -1).css("opacity", 1);
				}, 2000);*/

				core.util.getElementCached("#sidebar > div:first-child div").css("display", "block");
				//mapUi.adCycle(0);
			} else {
				core.util.storeData("hasAdblock", true);
			}
		//}, (typeof delayCheck === "undefined" || delayCheck) ? 5500 : 1000);
		}, 1500);
		//setTimeout(function() {
			core.util.getElementCached("#sidebar div[type=\"blocked-header\"]").css("opacity", 1);
			core.util.getElementCached("#sidebar div[type=\"blocked-desc\"]").css("opacity", 1);
		//}, 2000);
	},

	/*
		Handler to close the chest legend
	*/
	initializeLegend: function() {
		if (!overviewerConfig.settings.showChestMarkers) {
			core.util.getElementCached("#chestLegend").css("display", "none");
			return;
		}

		if (core.util.getData("chestLegend") == null) {
			core.util.storeData("chestLegend", true);
		}

		core.util.getElementCached("#chestLegend-close").click(function() {
			core.util.storeData("chestLegend", !core.util.getData("chestLegend"));
			mapUi.util.updateChestLegend();
		});
		mapUi.util.updateChestLegend();

		// Add event listener for zoom change
		overviewer.map.on("zoomend", mapUi.updateLegendVisibility);
		mapUi.updateLegendVisibility();
	},

	updateChestLegend: function() {
		if (core.util.getData("chestLegend")) {
			core.util.getElementCached("#chestLegend").removeClass("collapsed");

			core.util.getElementCached("#chestLegend-close i").removeClass("icon-chevron-down");
			core.util.getElementCached("#chestLegend-close i").addClass("icon-chevron-up");
		} else {
			core.util.getElementCached("#chestLegend").addClass("collapsed");

			core.util.getElementCached("#chestLegend-close i").removeClass("icon-chevron-up");
			core.util.getElementCached("#chestLegend-close i").addClass("icon-chevron-down");
		}
	},

	/*
		Add the worlds from the overviewerConfig into the dropdown
	*/
	initializeWorldDropdown: function() {
		core.util.getElementCached("#worldDropdown .content").html(overviewerConfig.worlds[overviewer.currentWorld].name);

		// Clear any old menu items
		core.util.getElementCached("#worldDropdown .dropdown-menu").html("");
		// Add in from the config
		for (i in overviewerConfig.worlds) {
			core.util.getElementCached("#worldDropdown .dropdown-menu").append("<li><a href='#' id='worldDropdown-" + i + "'>" + overviewerConfig.worlds[i].name + "</a></li>");
			$("#worldDropdown-" + i).click(function(e) {
				e.preventDefault();

				var wIndex = parseInt($(this).attr("id").split("-")[1]);
				if (wIndex == overviewer.currentWorld) return;

				core.util.getElementCached("#worldDropdown .content").html(overviewerConfig.worlds[wIndex].name);

				overviewer.currentWorld = wIndex;
				if (overviewerConfig.settings.resetTilesetOnWorldChange) overviewer.currentTileset = 0;
				core.util.globalRefresh();
			});
		}
	},

	/*
		Add the tilesets from the overviewerConfig into the dropdown
	*/
	initializeTilesetDropdown: function() {
		core.util.getElementCached("#tilesetDropdown .content").html(overviewerConfig.worlds[overviewer.currentWorld].tilesets[overviewer.currentTileset].name);

		// Clear any old menu items
		core.util.getElementCached("#tilesetDropdown .dropdown-menu").html("");
		// Add in from the config
		for (i in overviewerConfig.worlds[overviewer.currentWorld].tilesets) {
			core.util.getElementCached("#tilesetDropdown .dropdown-menu").append("<li><a href='#' id='tilesetDropdown-" + i + "'>" + overviewerConfig.worlds[overviewer.currentWorld].tilesets[i].name + "</a></li>");
			$("#tilesetDropdown-" + i).click(function(e) {
				e.preventDefault();

				var tsetIndex = parseInt($(this).attr("id").split("-")[1]);
				if (tsetIndex == overviewer.currentTileset) return;

				core.util.getElementCached("#tilesetDropdown .content").html(overviewerConfig.worlds[overviewer.currentWorld].tilesets[tsetIndex].name);

				overviewer.currentTileset = tsetIndex;
				core.util.globalRefresh();
			});
		}
	},

	/*
		Adds a click event handler to the logo
	*/
	initializeLogo: function() {
		core.util.getElementCached(".logo").click(function() {
			if (top.location != self.location && document.referrer.indexOf("minemap.net") == -1) {
				top.location = self.location.href;
			} else {
				// Reset our view to the center of the map
				var centerLatLng = overviewer.util.fromWorldToLatLng(core.util.getConfigValue("center")[0], core.util.getConfigValue("center")[1], core.util.getConfigValue("center")[2]);
				overviewer.map.setView([centerLatLng.lat, centerLatLng.lng], core.util.getConfigValue("defaultZoom"));
			}
		});
	},

	/*
		Adds placeholders to inputs
	*/
	initializePlaceholders: function() {
		if ($.support.placeholder) return;
		$('[placeholder]').focus(function() {
			var input = $(this);
			if (input.val() == input.attr('placeholder')) {
				input.val('');
				input.removeClass('placeholder');
			}
		}).blur(function() {
			var input = $(this);
			if (input.val() == '' || input.val() == input.attr('placeholder')) {
				input.addClass('placeholder');
				input.val(input.attr('placeholder'));
			}
		}).blur();
	},

	/*
		Adds a click handler to the sidebar collapse button
	*/
	initializeToggleSidebar: function() {
		core.util.getElementCached("#toggleSidebar").click(function() {
			var responsiveEls = ["#sidebarContainer", "#hudContainer", "#mapContainer"];
			var mode = $(responsiveEls[0]).hasClass("sidebarCollapsed");

			for (i in responsiveEls) {
				if (!mode) {
					$(responsiveEls[i]).addClass("sidebarCollapsed");
				} else {
					$(responsiveEls[i]).removeClass("sidebarCollapsed");
				}
			}

			setTimeout(function() {
				overviewer.map.invalidateSize(false);
			}, 400);

			if ($(window).width() >= 1200) {
				if (!core.util.getElementCached("#sidebarContainer").hasClass("sidebarCollapsed")) {
					mapUi.util.fadeElement(core.util.getElementCached("#toggleSidebarContainer"), false, 0, 300);
				}
			}
		});

		if ($(window).width() < 1200) {
			if ($(window).width() < 950 && document.referrer.indexOf("minemap.net") > -1) {
				mapUi.util.fadeElement(core.util.getElementCached("#toggleSidebarContainer"), true, 1, 300);
				core.util.getElementCached("#toggleSidebar").click();
			} else {
				setTimeout(function() {
					mapUi.util.fadeElement(core.util.getElementCached("#toggleSidebarContainer"), true, 1, 300);
				}, 6000);
			}
		}
	},

	/*
		Shows the notice if the referring url is not blank and
		it is not a mobile device
	*/
	initializeNotice: function() {
		var whitelist = [
			"://shotbow.net",
			"://www.shotbow.net",
			"://shotbow.com",
			"://www.shotbow.com",

			"://minezwiki.net",
			"://www.minezwiki.net",

			"://minemap.net",
			"://www.minemap.net",

			"://google.",
			"://google.",
			"://www.google.",
			"://www.google.",

			"://bing.",
			"://bing.",
			"://www.bing.",
			"://www.bing.",

			"://t.co",
			"://youtube.com",
			"://www.youtube.com"
		];

		for (i in whitelist) {
			if (document.referrer.indexOf(whitelist[i]) < 6) {
				return;
			}
		}
		if (document.referrer != "" && !$.browser.mobile) {
			core.util.getElementCached("#navbar .alert").css("display", "none");
			core.util.getElementCached("#externalReferrerAlert").css("display", "block");
		}
	},

	/*
		CSS based fade util because using jQuery is not very good
		performance-wise for animation events

		If it's fading in, make the element display block first
		then set the opacity

		If it's fading out, set the element's opacity first
		then set display equal to none
	*/
	fadeElement: function(el, fadeIn, opacity, delay) {
		if (!mapUi.fadeCache.hasOwnProperty(el.selector)) {
			mapUi.fadeCache[el.selector] = -1;
		}

		mapUi.fadeCache[el.selector] += 1;
		var id = mapUi.fadeCache[el.selector];

		el.css(fadeIn ? "display" : "opacity", fadeIn ? "block" : opacity);
		setTimeout(function() {
			if (id == mapUi.fadeCache[el.selector]) {
				el.css(fadeIn ? "opacity" : "display", fadeIn ? opacity : "none");
			}
		}, delay);
	},

	/*
		Extract and parse the coordinates from a search string
		Returns null if there are no coordinates to be extracted
	*/
	extractCoords: function(str) {
		// Early out
		if (str.replace(/[^\d]+/g, "").length == 0) return null;

		// Clean string leaving only numbers, spaces, dashes, and commas
		str = str.replace(/[^\d, -]+/g, "").replace(/ /g, ",").split(",");
		var coords = Array();
		for (i in str) {
			j = str[i].split(",")[0];
			if (j != "") coords.push(parseInt(j));
		}

		// Sanity check
		if (coords.length > 3) {
			coords.splice(0, coords.length - 3);
		}
		if (coords.length == 2) {
			coords.splice(1, 0, 64);
		}
		if (coords.length < 2) {
			coords = null;
		}
		return coords;
	}
};